name: 2ms Scan (Demo-friendly)

# Run manually for demo and on pushes/PRs to main
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

permissions:
  # required so upload-sarif can create code scanning results
  security-events: write
  contents: read
  actions: read

jobs:
  run-2ms:
    runs-on: ubuntu-latest
    env:
      TWO_MS_VERSION: "2.8.1"   # change to latest release tag or "latest"
      REPORT_DIR: reports
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo info (for demo)
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Commit: $GITHUB_SHA"
          git --no-pager log -n 3 --pretty=format:"%h %ad %s" --date=short

      - name: Create reports dir
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Run 2ms (git scan) â€” produce SARIF and YAML reports
        id: run_2ms
        run: |
          # mount repo and run Dockerized 2ms against the checked-out repo
          # produces: reports/2ms-results.sarif  and reports/2ms-results.yaml
          docker run --rm -v "$PWD":/repo checkmarx/2ms:${{ env.TWO_MS_VERSION }} git /repo \
            --report-path ${REPORT_DIR}/2ms-results.sarif \
            --report-path ${REPORT_DIR}/2ms-results.yaml \
            --stdout-format yaml \
            || echo "2ms exited with non-zero (may be results found)."

      - name: Save raw CLI output (for quick demo)
        if: always()
        run: |
          # Run 2ms again but save stdout to a human friendly file so you can cat it in demo
          docker run --rm -v "$PWD":/repo checkmarx/2ms:${{ env.TWO_MS_VERSION }} git /repo \
            --stdout-format yaml > ${REPORT_DIR}/2ms-stdout.yaml || true
          echo "Generated files:"
          ls -la ${REPORT_DIR}

      - name: Summarize SARIF (top 10 results) for quick console view
        if: always()
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          SARIF=${REPORT_DIR}/2ms-results.sarif
          if [ -f "$SARIF" ]; then
            echo "=== Top findings summary (from SARIF) ==="
            # This extracts ruleId + message + file location lines (first 10)
            jq -r '
              .runs[]?.results[]? |
              [
                (.ruleId // "no-rule"),
                (.message.text // .message?.text // "no-message"),
                ((.locations[0].physicalLocation.artifactLocation.uri) // "no-file"),
                ((.locations[0].physicalLocation.region.startLine) // "-")
              ] | @tsv
            ' "$SARIF" | head -n 10 | awk -F"\t" '{printf "- %s | %s | %s:%s\n",$1,$2,$3,$4}'
          else
            echo "No SARIF produced."
          fi

      - name: Upload SARIF to GitHub Code Scanning (so alerts appear in Security -> Code scanning)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.REPORT_DIR }}/2ms-results.sarif

      - name: Upload human-readable reports as artifacts (download during demo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 2ms-reports-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}

      - name: Print artifact links and next steps (demo notes)
        if: always()
        run: |
          echo "Artifacts uploaded (go to Actions > this run > Artifacts)."
          echo "SARIF uploaded to Code scanning (may take a few moments to appear)."
